-- Create the table for live sessions
CREATE TABLE public.live_sessions (
    id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    host_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    test_type text NOT NULL,
    test_year integer NOT NULL,
    status text DEFAULT 'lobby'::text NOT NULL, -- lobby, in_progress, completed
    join_code text NOT NULL UNIQUE
);

-- Create the table for participants in a live session
CREATE TABLE public.live_participants (
    id uuid DEFAULT gen_random_uuid() NOT NULL PRIMARY KEY,
    session_id uuid REFERENCES public.live_sessions(id) ON DELETE CASCADE NOT NULL,
    user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
    joined_at timestamp with time zone DEFAULT now() NOT NULL,
    score integer DEFAULT 0 NOT NULL,
    UNIQUE(session_id, user_id)
);

-- Create the table for answers submitted during a live session
CREATE TABLE public.live_answers (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    participant_id uuid REFERENCES public.live_participants(id) ON DELETE CASCADE NOT NULL,
    question_number integer NOT NULL,
    answer character(1) NOT NULL,
    submitted_at timestamp with time zone DEFAULT now() NOT NULL,
    is_correct boolean
);

-- Enable Row Level Security for all new tables
ALTER TABLE public.live_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.live_participants ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.live_answers ENABLE ROW LEVEL SECURITY;

-- Add new tables to the Supabase realtime publication
ALTER PUBLICATION supabase_realtime ADD TABLE public.live_sessions;
ALTER PUBLICATION supabase_realtime ADD TABLE public.live_participants;
ALTER PUBLICATION supabase_realtime ADD TABLE public.live_answers;


-- POLICIES
-- live_sessions policies
CREATE POLICY "Allow authenticated users to create sessions" ON public.live_sessions FOR INSERT TO authenticated WITH CHECK (auth.uid() = host_id);
CREATE POLICY "Allow anyone to view sessions" ON public.live_sessions FOR SELECT USING (true);
CREATE POLICY "Allow host to update their own session" ON public.live_sessions FOR UPDATE USING (auth.uid() = host_id);
CREATE POLICY "Allow host to delete their own session" ON public.live_sessions FOR DELETE USING (auth.uid() = host_id);

-- live_participants policies
CREATE POLICY "Allow authenticated users to join a session" ON public.live_participants FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow participants to view others in the same session" ON public.live_participants FOR SELECT USING (session_id IN (SELECT session_id FROM public.live_participants WHERE user_id = auth.uid()));
CREATE POLICY "Allow users to leave a session" ON public.live_participants FOR DELETE USING (auth.uid() = user_id);

-- live_answers policies
CREATE POLICY "Allow participant to submit answers for themselves" ON public.live_answers FOR INSERT WITH CHECK (participant_id IN (SELECT id FROM public.live_participants WHERE user_id = auth.uid()));
CREATE POLICY "Allow participants to view their own answers" ON public.live_answers FOR SELECT USING (participant_id IN (SELECT id FROM public.live_participants WHERE user_id = auth.uid()));
