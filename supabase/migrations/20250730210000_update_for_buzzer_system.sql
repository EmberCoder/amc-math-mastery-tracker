-- Update live_answers table to support buzzer system
ALTER TABLE public.live_answers 
DROP CONSTRAINT IF EXISTS live_answers_answer_check;

-- Change answer column to support text answers instead of just single characters
ALTER TABLE public.live_answers 
ALTER COLUMN answer TYPE text;

-- Add buzzer timing columns
ALTER TABLE public.live_answers 
ADD COLUMN IF NOT EXISTS buzzed_at timestamp with time zone,
ADD COLUMN IF NOT EXISTS buzz_order integer;

-- Create table for tracking buzzer state per question
CREATE TABLE IF NOT EXISTS public.live_buzzer_state (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    session_id uuid REFERENCES public.live_sessions(id) ON DELETE CASCADE NOT NULL,
    question_number integer NOT NULL,
    first_buzzer_participant_id uuid REFERENCES public.live_participants(id) ON DELETE CASCADE,
    buzzer_locked boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    UNIQUE(session_id, question_number)
);

-- Enable RLS for new table
ALTER TABLE public.live_buzzer_state ENABLE ROW LEVEL SECURITY;

-- Add to realtime
ALTER PUBLICATION supabase_realtime ADD TABLE public.live_buzzer_state;

-- Policies for buzzer state
CREATE POLICY "Allow authenticated users to view buzzer state" ON public.live_buzzer_state FOR SELECT USING (true);
CREATE POLICY "Allow participants to insert buzzer state" ON public.live_buzzer_state FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow participants to update buzzer state" ON public.live_buzzer_state FOR UPDATE TO authenticated USING (true);

-- Create RPC function to handle buzzer logic
CREATE OR REPLACE FUNCTION public.buzz_in(
    p_session_id uuid,
    p_participant_id uuid,
    p_question_number integer
) RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    buzzer_record record;
    participant_name text;
BEGIN
    -- Get participant name
    SELECT username INTO participant_name
    FROM live_participants lp
    JOIN profiles p ON lp.user_id = p.id
    WHERE lp.id = p_participant_id;

    -- Try to insert or get existing buzzer state
    INSERT INTO live_buzzer_state (session_id, question_number, first_buzzer_participant_id, buzzer_locked)
    VALUES (p_session_id, p_question_number, p_participant_id, true)
    ON CONFLICT (session_id, question_number) 
    DO NOTHING;

    -- Get the current buzzer state
    SELECT * INTO buzzer_record
    FROM live_buzzer_state
    WHERE session_id = p_session_id AND question_number = p_question_number;

    -- Return result
    IF buzzer_record.first_buzzer_participant_id = p_participant_id THEN
        RETURN jsonb_build_object(
            'success', true,
            'first_buzzer', true,
            'participant_name', participant_name,
            'message', 'You buzzed in first!'
        );
    ELSE
        SELECT username INTO participant_name
        FROM live_participants lp
        JOIN profiles p ON lp.user_id = p.id
        WHERE lp.id = buzzer_record.first_buzzer_participant_id;
        
        RETURN jsonb_build_object(
            'success', true,
            'first_buzzer', false,
            'first_buzzer_name', participant_name,
            'message', participant_name || ' buzzed in first!'
        );
    END IF;
END;
$$;
